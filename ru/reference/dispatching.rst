Диспетчер контроллеров
======================
Компонент :doc:`Phalcon\\Mvc\\Dispatcher <../api/Phalcon_Mvc_Dispatcher>`  отвечает за инициацию контроллеров и выполнения в них действий, для MVC
приложения. Понимание его работы и его возможностей помогает нам получить больше возможностей предоставляемых фреймворком.

Цикл работы диспетчера
----------------------
Этот важнейший процесс, который имеет много общего с работой MVC, особенно в части работы контроллеров. Работа контроллера вызывается диспетчером.
Файлы контроллера считываются, загружаются, инициируются, чтобы затем выполнить необходимые действия. Если действие направляет поток на другой
котроллер/действие (action), диспетчер контроллера стартует снова. Для лучшей иллюстрации в примере ниже показан приблизительный процесс происходящий
внутри :doc:`Phalcon\\Mvc\\Dispatcher <../api/Phalcon_Mvc_Dispatcher>`:

.. code-block:: php

    <?php

    // Цикл диспетчера
    while (!$finished) {

        $finished = true;

        $controllerClass = $controllerName."Controller";

        // Создание экземпляра класса контроллера, работает автопогрузчика
        $controller = new $controllerClass();

        // Выполнение действия
        call_user_func_array(array($controller, $actionName . "Action"), $params);

        // Значение переменной должно быть изменено при необходимости запуска другого контроллера
        // $finished = false;

    }

Этот код, конечно, нуждается в дополнительных проверках и доработке, но здесь наглядно показан обычный поток операций в диспетчере.


События при работе диспетчера
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
:doc:`Phalcon\\Mvc\\Dispatcher <../api/Phalcon_Mvc_Dispatcher>` может отправлять события :doc:`EventsManager <events>` если это необходимо.
События вызываются с помощью типа "dispatch". Некоторые события, при возвращении возвращается false, могут остановить активные действия.
Поддерживаются следующие события:
 

+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| Название события     | Время срабатывания                                                                                                                                                                                           | Могут ли остановить операцию? |
+======================+================================================================================================================================================================================================================+=============================+
| beforeDispatchLoop   | До запуска цикла диспетчера. В этот момент диспетчер не знает, существуют ли контроллера или действия, которые должны быть выполнены. Диспетчер владеет только информацией поступившей из Маршрутизатора     | Да                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| beforeDispatch       | До выполнения цикла диспетчера. В этот момент диспетчер не знает, существуют ли контроллера или действия, которые должны быть выполнены. Диспетчер знает только информацию, поступившую из Маршрутизатора    | Да                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| beforeExecuteRoute   | До выполнения действия в контроллера. В этой точке контроллер инициализирован и знает о существовании действия (action)                                                                                      | Да                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| afterExecuteRoute    | После выполнения действия в контроллера. Не остановливает текущую операцию, используйте это событие только для завершения/очистки после выполненного действия                                                | Нет                           |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| beforeNotFoundAction | Когда действие не найдено в котроллере                                                                                                                                                                       | Да                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| beforeException      | До вызова диспетчером любого исключения                                                                                                                                                                      | Да                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| afterDispatch        | После выполнения цикла диспетчера. Не остановливает текущую операцию, используйте это событие только для завершения/очистки после выполненного действия                                                      | Да                            |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+
| afterDispatchLoop    | После завершения цикла диспетчера                                                                                                                                                                            | Нет                           |
+----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------+

В обучающем материале :doc:`INVO <tutorial-invo>` показано, как воспользоваться диспетчером событий для реализации фильтра безопасности :doc:`Acl <acl>`.

В примере ниже показано как прикрепить слушателей (listenes) к событиям контроллера:

.. code-block:: php

    <?php

    $di->set('dispatcher', function(){

        // Создание менеджера событий
        $eventsManager = new Phalcon\Events\Manager();

        // Прикрепление функции-слушателя для событий типа "dispatch"
        $eventsManager->attach("dispatch", function($event, $dispatcher) {
            //...
        });

        $dispatcher = new \Phalcon\Mvc\Dispatcher();

        // Связывание менеджера событий с диспетчером
        $dispatcher->setEventsManager($eventsManager);

        return $dispatcher;

    }, true);

Экземпляр контроллера автоматически выступает в качестве слушателя для событий, так что вы можете реализовать методы в самом контроллере:

.. code-block:: php

    <?php

    class PostsController extends \Phalcon\Mvc\Controller
    {

        public function beforeExecuteRoute($dispatcher)
        {
            // Выполняется перед каждым найденным действием
        }

        public function afterExecuteRoute($dispatcher)
        {
            // Выполняется после каждого выполненного действия
        }

    }

Переадресация на другое действие
--------------------------------
Цикл диспетчера позволяет перенаправить поток на другой контроллер/действие. Это очень полезно, для проверки может ли пользователь иметь
доступ к определенным функциям, перенаправления пользователя на другую страницу или просто для повторного использования кода.

.. code-block:: php

    <?php

    class PostsController extends \Phalcon\Mvc\Controller
    {

        public function indexAction()
        {

        }

        public function saveAction($year, $postTitle)
        {

            // .. сохраняем данные и перенаправляем пользователя

            // Перенаправляем на действие index 
            $this->dispatcher->forward(array(
                "controller" => "post",
                "action" => "index"
            ));
        }

    }

Имейте ввиду, использование метода "forward" - это не то же самое что редирект в HTTP. Хотя внешне результат будет таким же.
Метод "forward" не перезагружает текущую страницу, все перенаправления выполняются в одном запросе, тогда как HTTP редирект требует два
запроса для завершения процесса.

Пример перенаправлений:

.. code-block:: php

    <?php

    // Направляем поток на другое действие текущего контроллера
    $this->dispatcher->forward(array(
        "action" => "search"
    ));

    // Направляем поток на другое действие текущего контроллера с передачей параметров
    $this->dispatcher->forward(array(
        "action" => "search",
        "params" => array(1, 2, 3)
    ));

Метод forward принимает следующие параметры:

+----------------+--------------------------------------------------------+
| Параметр       | Описание                                               |
+================+========================================================+
| controller     | Правильное имя контроллера для вызова                  |
+----------------+--------------------------------------------------------+
| action         | Правильное название действия для вызова                |
+----------------+--------------------------------------------------------+
| params         | Массив параметров для действия (action)                |
+----------------+--------------------------------------------------------+
| namespace      | Пространство имён, которому принадлежит контроллер     |
+----------------+--------------------------------------------------------+

Получение параметров
--------------------
Если текущий маршрут содержит именованные параметры вы можете получить их в контроллере, представлении или любом другом компоненте,
расширяющим :doc:`Phalcon\\DI\\Injectable <../api/Phalcon_DI_Injectable>`.

.. code-block:: php

    <?php

    class PostsController extends \Phalcon\Mvc\Controller
    {

        public function indexAction()
        {

        }

        public function saveAction()
        {

            // Получение параметра title, находящимся в параметрах URL 
            $title = $this->dispatcher->getParam("title");

            // Получение параметра year, пришедшего из URL и отфильтрованного как число
            $year = $this->dispatcher->getParam("year", "int");
        }

    }

Обработка исключений "Не найдено"
---------------------------------
Используйте возможности :doc:`EventsManager <events>` для установки событий, выполняемых при отсутствии требуемого контроллера/действия.

.. code-block:: php

    <?php

    $di->setShared('dispatcher', function() {

        // Создание/Получение менеджера событий EventManager
        $eventsManager = new Phalcon\Events\Manager();

        // Присоединение слушателя (listener)
        $eventsManager->attach("dispatch", function($event, $dispatcher, $exception) {

            // Контроллер существует а действие нет
            if ($event->getType() == 'beforeNotFoundAction') {
                $dispatcher->forward(array(
                    'controller' => 'index',
                    'action' => 'show404'
                ));
                return false;
            }

            // Альтернативный путь, контроллер или действие не существует
            if ($event->getType() == 'beforeException') {
                switch ($exception->getCode()) {
                    case Phalcon\Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:
                    case Phalcon\Dispatcher::EXCEPTION_ACTION_NOT_FOUND:
                        $dispatcher->forward(array(
                            'controller' => 'index',
                            'action' => 'show404'
                        ));
                        return false;
                }
            }
        });

        $dispatcher = new Phalcon\Mvc\Dispatcher();

        // присоединение EventsManager к диспетчеру 
        $dispatcher->setEventsManager($eventsManager);

        return $dispatcher;

    }, true);

Реализация собственных диспетчеров
----------------------------------
Для создания диспетчеров необходимо реализовать интерфейс :doc:`Phalcon\\Mvc\\DispatcherInterface <../api/Phalcon_Mvc_DispatcherInterface>` и подменить
диспетчер Phalcon.